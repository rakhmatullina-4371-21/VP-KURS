//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SMART_REST
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity.Migrations;
    using System.Linq;
    using System.Windows.Forms;

    public partial class orders
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public orders()
        {
            this.content_orders = new HashSet<content_orders>();
        }

        public int id_order { get; set; }
        public Nullable<int> id_employee { get; set; }
        public System.TimeSpan time_order { get; set; }
        public Nullable<int> id_stock { get; set; }
        public decimal full_price { get; set; }
        public Nullable<int> idtable { get; set; }
    
        public virtual employee employee { get; set; }
        public virtual list_of_table list_of_table { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<content_orders> content_orders { get; set; }
        public virtual stocks stocks { get; set; }
        SREntities db = new SREntities();
        public int AddOrd()    //возврат присвоение заказу номера
        {
            
            int MaxId;
            if (db.orders == null)
            {
                MaxId = 1;
            }
            else 
            {
                MaxId = (int)db.orders.Max(p => p.id_employee) + 1;
            }
            return MaxId;
        }
        public bool SaveOrd(int id_ord, int id_emp, int id_tab) 
        {
            orders ord = new orders();
            ord.id_order = id_ord;
            ord.id_employee = db.employee.First(p=>p.id_employee== id_emp).id_employee;
            ord.idtable = id_tab;
            ord.time_order = DateTime.Now.TimeOfDay;
            var stock = db.stocks.Where(p => p.start_time <= ord.time_order && p.end_time >= ord.time_order).ToList();
            if (stock.Count !=0)
            {
                var discount = stock.Min(p =>p.discount);
                ord.id_stock = db.stocks.First(p => p.discount == discount).id_stock;
            }
            else { ord.id_stock = null; }

            //try
            //{
                db.orders.Add(ord);
                db.SaveChanges();
            foreach (content_orders i in Listtt) 
            {
                if (i.count_dish != 0) 
                {
                    var content = new content_orders();
                    content.id_order = db.orders.First(p => p.id_order == id_order).id_order;
                    content.id_dish = db.list_of_dishes.First(p => p.id_dish == i.id_dish).id_dish;
                    content.count_dish = i.count_dish;
                    db.content_orders.Add(i);
                    db.SaveChanges();
                }

            }
                return true;
            //}
            //catch { return false; }
        }
        public  List<content_orders> Listtt = new List<content_orders>();
        public  void ListContOrderrrrrrrr(int id_order, int id_dish, int count)
        {
            var content = new content_orders();
            content.id_order = id_order;
            content.id_dish =id_dish;
            content.count_dish = count;
            Listtt.Add(content);
        }
        public List<int> SelOrd(employee emp) 
        {
            return db.orders.Where(p => p.id_employee == emp.id_employee).Select(p => p.id_order).ToList();
        }
    }
}
