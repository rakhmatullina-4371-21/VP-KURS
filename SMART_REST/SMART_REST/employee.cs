//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SMART_REST
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity.Migrations;
    using System.Linq;

    public partial class employee
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public employee()
        {
            this.orders = new HashSet<orders>();
        }
    
        public int id_employee { get; set; }
        public string surname { get; set; }
        public string name { get; set; }
        public string lastname { get; set; }
        public string login { get; set; }
        public string password { get; set; }
        public Nullable<int> id_position { get; set; }
    
        public virtual positions positions { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<orders> orders { get; set; }




        //----------------------------------------------------------------------------------------------------------------------------------------------------





        SmartRestaurantEntities db = new SmartRestaurantEntities();
        public employee(string login, string password)   //инициализация сотрудника по паролю и логину
        {
            var emp = db.employee.FirstOrDefault(p => p.login == login && p.password == password);
            if (emp != null)
            {
                this.id_employee = emp.id_employee;
                this.surname = emp.surname;
                this.name = emp.name;
                this.lastname = emp.lastname;
                this.login = emp.login;
                this.password = emp.password;
                this.id_position = emp.id_position;
            }

        }
        public static employee DynamicEmp(dynamic emp)     //перевод из динамического типа в тип employee
        {
            employee NewEmp = new employee();
            NewEmp.id_employee = emp.id_employee;
            NewEmp.surname = emp.surname;
            NewEmp.name = emp.name;
            NewEmp.lastname = emp.lastname;
            NewEmp.login = emp.login;
            NewEmp.password = emp.password;
            NewEmp.id_position = emp.id_position;
            return NewEmp;
        }
        List<dynamic> listEmp;   //список сотрудников и их должностей
        public dynamic SelectListEmp()   //вывод списка сотрудников
        {
            listEmp = (from i in db.employee
                       join p in db.positions on i.id_position equals p.id_position
                       select new { i.id_employee, i.surname, i.name, i.lastname, i.login, i.password, i.id_position, p.position }).ToList<dynamic>();
            return listEmp;
        }

        public dynamic Editemp(int id)    //возврат сотрудника, информацию о котором необходимо изменить
        {
            var emp = listEmp.First(w => w.id_employee == id);
            return emp;
        }
        public int AddEmp()    //возврат сотрудника, информацию о котором необходимо добавить
        {
            int MaxId = listEmp.Max(p => p.id_employee) + 1;
            return MaxId;
        }
        public bool DeleteEmp(int id)    //возврат сотрудника, информацию о котором необходимо удалить
        {
            try
            {
                var emp = db.employee.First(w => w.id_employee == id);
                db.employee.Remove(emp);
                db.SaveChanges();
                return true;
            }
            catch { return false; }
        }

        public bool SaveEmp(int id, string surname, string name, string lastname, string login, string password, int? id_pos)   //сохранение изменений
        {
            var emp = db.employee.FirstOrDefault(w => w.id_employee == id);

            if ((surname != "") && (name != "") && (login != "") && (password != "") && (id_pos != null))
            {
                if (emp == null)
                {
                    emp = new employee();
                    emp.id_employee = id;
                }
                emp.surname = surname;
                emp.name = name;
                emp.lastname = lastname;
                if (emp.login != login)   //при создании БД  на логин было наложено ограничение того, чтобы он не повторялся если он изменился, то изменяем
                {
                    emp.login = login;
                }
                emp.password = password;
                emp.id_position = id_pos;
                db.employee.AddOrUpdate(emp);
                db.SaveChanges();
                return true;
            }
            else
            {
                return false;
            }


        }
        public static List<string> ComboBoxItem()
        {
            List<string> items = new List<string>();
            items.Add("ПО ФАМИЛИИ");
            items.Add("ПО ИМЕНИ");
            items.Add("ПО ДОЛЖНОСТИ");
            return items;

        }
        public List<dynamic> searchEmp(int item, string searchString)
        {
            var empList = new List<dynamic>();
            switch (item)
            {
                case 0:
                    {
                        empList = db.employee.Where(p => p.surname == searchString)
                                  .Join(db.positions, p => p.id_position, e => e.id_position, (p, e) => new { p.id_employee, p.surname, p.name, p.lastname, p.login, p.password, e.position })
                                  .ToList<dynamic>();

                    }
                    break;
                case 1:
                    {
                        empList = db.employee.Where(p => p.name == searchString)
                             .Join(db.positions, p => p.id_position, e => e.id_position, (p, e) => new { p.id_employee, p.surname, p.name, p.lastname, p.login, p.password, e.position })
                             .ToList<dynamic>();
                    }
                    break;
                case 2:
                    {
                        empList = db.positions.Where(p => p.position == searchString)
                            .Join(db.employee, p => p.id_position, e => e.id_position, (p, e) => new { e.id_employee, e.surname, e.name, e.lastname, e.login, e.password, p.position })
                            .ToList<dynamic>();
                    }
                    break;

            }
            return empList;
        }

    }
}
